
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000007e0  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ed0  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083a  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067f  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cd  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b2  00000000  00000000  00002d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000351b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
  7a:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Triger_Enable>:
char column_position [2] = {0x80,0xc0};

void Triger_Enable()
{
	
	LCD_EN_Port |=(1u<<LCD_EN);
  82:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <Triger_Enable+0x4>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <Triger_Enable+0xa>
	_delay_us(1);
	LCD_EN_Port &=~(1u<<LCD_EN);
  8c:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e6       	ldi	r24, 0x6F	; 111
  90:	97 e1       	ldi	r25, 0x17	; 23
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <Triger_Enable+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <Triger_Enable+0x16>
  98:	00 00       	nop
  9a:	08 95       	ret

0000009c <Send_4BitData>:
	_delay_ms(3);	
	
}

void Send_4BitData(char data)
{
  9c:	cf 93       	push	r28
  9e:	c8 2f       	mov	r28, r24
	
	if (data & (1u<<7))			LCD_D7_Port |= (1u<<LCD_D7);	//check bit 7 of data
  a0:	88 23       	and	r24, r24
  a2:	14 f4       	brge	.+4      	; 0xa8 <Send_4BitData+0xc>
  a4:	df 9a       	sbi	0x1b, 7	; 27
  a6:	01 c0       	rjmp	.+2      	; 0xaa <Send_4BitData+0xe>
	else						LCD_D7_Port &= ~(1u<<LCD_D7);	//check bit 7 of data
  a8:	df 98       	cbi	0x1b, 7	; 27
	
	if (data & (1u<<6))			LCD_D6_Port |= (1u<<LCD_D6);	//check bit 6 of data
  aa:	c6 ff       	sbrs	r28, 6
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <Send_4BitData+0x16>
  ae:	de 9a       	sbi	0x1b, 6	; 27
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <Send_4BitData+0x18>
	else						LCD_D6_Port &= ~(1u<<LCD_D6);	//check bit 6 of data
  b2:	de 98       	cbi	0x1b, 6	; 27
	
	if (data & (1u<<5))			LCD_D5_Port |= (1u<<LCD_D5);	//check bit 5 of data
  b4:	c5 ff       	sbrs	r28, 5
  b6:	02 c0       	rjmp	.+4      	; 0xbc <Send_4BitData+0x20>
  b8:	dd 9a       	sbi	0x1b, 5	; 27
  ba:	01 c0       	rjmp	.+2      	; 0xbe <Send_4BitData+0x22>
	else					    LCD_D5_Port &= ~(1u<<LCD_D5);	//check bit 5 of data
  bc:	dd 98       	cbi	0x1b, 5	; 27
	
	if (data & (1u<<4))			LCD_D4_Port |= (1u<<LCD_D4);	//check bit 4 of data
  be:	c4 ff       	sbrs	r28, 4
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Send_4BitData+0x2a>
  c2:	dc 9a       	sbi	0x1b, 4	; 27
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <Send_4BitData+0x2c>
	else						LCD_D4_Port &= ~(1u<<LCD_D4);	//check bit 4 of data
  c6:	dc 98       	cbi	0x1b, 4	; 27

	Triger_Enable();
  c8:	0e 94 41 00 	call	0x82	; 0x82 <Triger_Enable>
	
	if (data & (1u<<3))			LCD_D7_Port |= (1u<<LCD_D7);	//check bit 3 of data
  cc:	c3 ff       	sbrs	r28, 3
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <Send_4BitData+0x38>
  d0:	df 9a       	sbi	0x1b, 7	; 27
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <Send_4BitData+0x3a>
	else					    LCD_D7_Port &= ~(1u<<LCD_D7);	//check bit 3 of data
  d4:	df 98       	cbi	0x1b, 7	; 27

	if (data & (1u<<2))		    LCD_D6_Port |= (1u<<LCD_D6);	//check bit 2 of data
  d6:	c2 ff       	sbrs	r28, 2
  d8:	02 c0       	rjmp	.+4      	; 0xde <Send_4BitData+0x42>
  da:	de 9a       	sbi	0x1b, 6	; 27
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <Send_4BitData+0x44>
	else						LCD_D6_Port &= ~(1u<<LCD_D6);	//check bit 2 of data
  de:	de 98       	cbi	0x1b, 6	; 27

	if (data & (1u<<1))			LCD_D5_Port |= (1u<<LCD_D5);	//check bit 1 of data
  e0:	c1 ff       	sbrs	r28, 1
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <Send_4BitData+0x4c>
  e4:	dd 9a       	sbi	0x1b, 5	; 27
  e6:	01 c0       	rjmp	.+2      	; 0xea <Send_4BitData+0x4e>
	else						LCD_D5_Port &= ~(1u<<LCD_D5);	//check bit 1 of data
  e8:	dd 98       	cbi	0x1b, 5	; 27

	if (data & (1u<<0))		    LCD_D4_Port |= (1u<<LCD_D4);	//check bit 0 of data
  ea:	c0 ff       	sbrs	r28, 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Send_4BitData+0x56>
  ee:	dc 9a       	sbi	0x1b, 4	; 27
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <Send_4BitData+0x58>
	else					    LCD_D4_Port &= ~(1u<<LCD_D4);	//check bit 0 of data
  f2:	dc 98       	cbi	0x1b, 4	; 27

	Triger_Enable();
  f4:	0e 94 41 00 	call	0x82	; 0x82 <Triger_Enable>

}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <Send_A_Character>:

void Send_A_Character(unsigned char character)
{
	
	LCD_RS_Port |= (1u<<LCD_RS);
  fc:	c1 9a       	sbi	0x18, 1	; 24
	LCD_RW_Port &=~(1u<<LCD_RW);
  fe:	c2 98       	cbi	0x18, 2	; 24
	Send_4BitData(character);
 100:	0e 94 4e 00 	call	0x9c	; 0x9c <Send_4BitData>
 104:	08 95       	ret

00000106 <Send_A_Command>:
}

void Send_A_Command(unsigned char command)
{
	
	LCD_RS_Port &=~(1u<<LCD_RS);
 106:	c1 98       	cbi	0x18, 1	; 24
	LCD_RW_Port &=~(1u<<LCD_RW);
 108:	c2 98       	cbi	0x18, 2	; 24
	Send_4BitData(command);
 10a:	0e 94 4e 00 	call	0x9c	; 0x9c <Send_4BitData>
 10e:	08 95       	ret

00000110 <Send_A_String>:
	
}

void Send_A_String(char *string)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	while (*string > 0)
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	31 f0       	breq	.+12     	; 0x128 <Send_A_String+0x18>
 11c:	21 96       	adiw	r28, 0x01	; 1
	{
		Send_A_Character(*string++);
 11e:	0e 94 7e 00 	call	0xfc	; 0xfc <Send_A_Character>
	
}

void Send_A_String(char *string)
{
	while (*string > 0)
 122:	89 91       	ld	r24, Y+
 124:	81 11       	cpse	r24, r1
 126:	fb cf       	rjmp	.-10     	; 0x11e <Send_A_String+0xe>
	{
		Send_A_Character(*string++);
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <Goto_Location>:

void Goto_Location(uint8_t y , uint8_t x)
{
 12e:	61 50       	subi	r22, 0x01	; 1
	Send_A_Command(column_position[y-1]+(x-1));
 130:	e8 2f       	mov	r30, r24
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e1 5a       	subi	r30, 0xA1	; 161
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
 13a:	86 0f       	add	r24, r22
 13c:	0e 94 83 00 	call	0x106	; 0x106 <Send_A_Command>
 140:	08 95       	ret

00000142 <LCD_Initializaion>:
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9c e9       	ldi	r25, 0x9C	; 156
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_Initializaion+0x4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_Initializaion+0xa>
 14c:	00 00       	nop

void LCD_Initializaion(void)
{
	_delay_ms(20);
	
	LCD_RW_DDR |=(1u<<LCD_RW);
 14e:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR |=(1u<<LCD_RS);
 150:	b9 9a       	sbi	0x17, 1	; 23
	LCD_EN_DDR |=(1u<<LCD_EN);
 152:	bb 9a       	sbi	0x17, 3	; 23
	LCD_D4_DDR |=(1u<<LCD_D4);
 154:	d4 9a       	sbi	0x1a, 4	; 26
	LCD_D5_DDR |=(1u<<LCD_D5);
 156:	d5 9a       	sbi	0x1a, 5	; 26
	LCD_D6_DDR |=(1u<<LCD_D6);
 158:	d6 9a       	sbi	0x1a, 6	; 26
	LCD_D7_DDR |=(1u<<LCD_D7);
 15a:	d7 9a       	sbi	0x1a, 7	; 26
	
	Send_A_Command(0x33U);
 15c:	83 e3       	ldi	r24, 0x33	; 51
 15e:	0e 94 83 00 	call	0x106	; 0x106 <Send_A_Command>
	Send_A_Command(0x32U);
 162:	82 e3       	ldi	r24, 0x32	; 50
 164:	0e 94 83 00 	call	0x106	; 0x106 <Send_A_Command>
	Send_A_Command(0x28U);
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	0e 94 83 00 	call	0x106	; 0x106 <Send_A_Command>
	Send_A_Command(0x0CU);
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	0e 94 83 00 	call	0x106	; 0x106 <Send_A_Command>
	Send_A_Command(0x01U);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 83 00 	call	0x106	; 0x106 <Send_A_Command>
 17a:	08 95       	ret

0000017c <Send_A_String_WithLoc>:
	
}

void Send_A_String_WithLoc(uint8_t y, uint8_t x, char *StringOfCharacters)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ea 01       	movw	r28, r20
	Goto_Location(y,x);
 182:	0e 94 97 00 	call	0x12e	; 0x12e <Goto_Location>
	Send_A_String(StringOfCharacters);
 186:	ce 01       	movw	r24, r28
 188:	0e 94 88 00 	call	0x110	; 0x110 <Send_A_String>
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <Send_An_Integer_WithLoc>:

void Send_An_Integer_WithLoc(uint8_t y, uint8_t x, int IntegerToDisplay, char NumberOfDigits)
{
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	98 2e       	mov	r9, r24
 1b0:	86 2e       	mov	r8, r22
 1b2:	ca 01       	movw	r24, r20
	char StringToDisplay[NumberOfDigits];
	itoa(IntegerToDisplay,StringToDisplay,10);
	for (int i=0;i<NumberOfDigits;i++)	Send_A_String(" ");
	Send_A_String_WithLoc(y,x,StringToDisplay);
	
}
 1b4:	ad b6       	in	r10, 0x3d	; 61
 1b6:	be b6       	in	r11, 0x3e	; 62
	Send_A_String(StringOfCharacters);
}

void Send_An_Integer_WithLoc(uint8_t y, uint8_t x, int IntegerToDisplay, char NumberOfDigits)
{
	char StringToDisplay[NumberOfDigits];
 1b8:	e2 2e       	mov	r14, r18
 1ba:	f1 2c       	mov	r15, r1
 1bc:	2d b7       	in	r18, 0x3d	; 61
 1be:	3e b7       	in	r19, 0x3e	; 62
 1c0:	2e 19       	sub	r18, r14
 1c2:	3f 09       	sbc	r19, r15
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	3e bf       	out	0x3e, r19	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	2d bf       	out	0x3d, r18	; 61
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	69 01       	movw	r12, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	b9 01       	movw	r22, r18
 1d8:	0e 94 b9 03 	call	0x772	; 0x772 <__itoa_ncheck>
	itoa(IntegerToDisplay,StringToDisplay,10);
	for (int i=0;i<NumberOfDigits;i++)	Send_A_String(" ");
 1dc:	1e 14       	cp	r1, r14
 1de:	1f 04       	cpc	r1, r15
 1e0:	5c f4       	brge	.+22     	; 0x1f8 <Send_An_Integer_WithLoc+0x66>
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	82 e6       	ldi	r24, 0x62	; 98
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 88 00 	call	0x110	; 0x110 <Send_A_String>
 1ee:	0f 5f       	subi	r16, 0xFF	; 255
 1f0:	1f 4f       	sbci	r17, 0xFF	; 255
 1f2:	0e 15       	cp	r16, r14
 1f4:	1f 05       	cpc	r17, r15
 1f6:	b9 f7       	brne	.-18     	; 0x1e6 <Send_An_Integer_WithLoc+0x54>
	Send_A_String_WithLoc(y,x,StringToDisplay);
 1f8:	a6 01       	movw	r20, r12
 1fa:	68 2d       	mov	r22, r8
 1fc:	89 2d       	mov	r24, r9
 1fe:	0e 94 be 00 	call	0x17c	; 0x17c <Send_A_String_WithLoc>
	
}
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	be be       	out	0x3e, r11	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	ad be       	out	0x3d, r10	; 61
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	bf 90       	pop	r11
 21e:	af 90       	pop	r10
 220:	9f 90       	pop	r9
 222:	8f 90       	pop	r8
 224:	08 95       	ret

00000226 <Send_An_Integer>:
	Send_An_Integer(decimalValue,5);

}

void Send_An_Integer(int IntegerToDisplay, char NumberOfDigits)
{
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
		char StringToDisplay[NumberOfDigits];
		itoa(IntegerToDisplay,StringToDisplay,10);
		Send_A_String(StringToDisplay);
	
}
 236:	ed b6       	in	r14, 0x3d	; 61
 238:	fe b6       	in	r15, 0x3e	; 62

}

void Send_An_Integer(int IntegerToDisplay, char NumberOfDigits)
{
		char StringToDisplay[NumberOfDigits];
 23a:	2d b7       	in	r18, 0x3d	; 61
 23c:	3e b7       	in	r19, 0x3e	; 62
 23e:	26 1b       	sub	r18, r22
 240:	31 09       	sbc	r19, r1
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	3e bf       	out	0x3e, r19	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	2d bf       	out	0x3d, r18	; 61
 24c:	0d b7       	in	r16, 0x3d	; 61
 24e:	1e b7       	in	r17, 0x3e	; 62
 250:	0f 5f       	subi	r16, 0xFF	; 255
 252:	1f 4f       	sbci	r17, 0xFF	; 255
 254:	4a e0       	ldi	r20, 0x0A	; 10
 256:	b8 01       	movw	r22, r16
 258:	0e 94 b9 03 	call	0x772	; 0x772 <__itoa_ncheck>
		itoa(IntegerToDisplay,StringToDisplay,10);
		Send_A_String(StringToDisplay);
 25c:	c8 01       	movw	r24, r16
 25e:	0e 94 88 00 	call	0x110	; 0x110 <Send_A_String>
	
}
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	fe be       	out	0x3e, r15	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	ed be       	out	0x3d, r14	; 61
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	08 95       	ret

0000027a <Send_A_Float_withloc>:
	Send_A_String_WithLoc(y,x,StringToDisplay);
	
}

void Send_A_Float_withloc(uint8_t y, uint8_t x ,  float number , unsigned int decimal)
{
 27a:	4f 92       	push	r4
 27c:	5f 92       	push	r5
 27e:	6f 92       	push	r6
 280:	7f 92       	push	r7
 282:	8f 92       	push	r8
 284:	9f 92       	push	r9
 286:	af 92       	push	r10
 288:	bf 92       	push	r11
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	49 01       	movw	r8, r18
 298:	5a 01       	movw	r10, r20
	Goto_Location(y,x);
 29a:	0e 94 97 00 	call	0x12e	; 0x12e <Goto_Location>
	
	float after=10.0;

	if (decimal == 1 )		after = after *1;
 29e:	01 30       	cpi	r16, 0x01	; 1
 2a0:	11 05       	cpc	r17, r1
 2a2:	19 f1       	breq	.+70     	; 0x2ea <Send_A_Float_withloc+0x70>

	else if (decimal==2)	after = 100.0;
 2a4:	02 30       	cpi	r16, 0x02	; 2
 2a6:	11 05       	cpc	r17, r1
 2a8:	49 f1       	breq	.+82     	; 0x2fc <Send_A_Float_withloc+0x82>

	else if (decimal==3)	after = 1000.0;
 2aa:	03 30       	cpi	r16, 0x03	; 3
 2ac:	11 05       	cpc	r17, r1
 2ae:	79 f1       	breq	.+94     	; 0x30e <Send_A_Float_withloc+0x94>

	else if (decimal==4)	after = 10000.0;
 2b0:	04 30       	cpi	r16, 0x04	; 4
 2b2:	11 05       	cpc	r17, r1
 2b4:	a9 f1       	breq	.+106    	; 0x320 <Send_A_Float_withloc+0xa6>

	else if (decimal==5)	after = 100000.0;
 2b6:	05 30       	cpi	r16, 0x05	; 5
 2b8:	11 05       	cpc	r17, r1
 2ba:	e1 f1       	breq	.+120    	; 0x334 <Send_A_Float_withloc+0xba>

	else if (decimal==6)	after = 1000000.0;
 2bc:	06 30       	cpi	r16, 0x06	; 6
 2be:	11 05       	cpc	r17, r1
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <Send_A_Float_withloc+0x4a>
 2c2:	42 c0       	rjmp	.+132    	; 0x348 <Send_A_Float_withloc+0xce>

	else if (decimal==7)	after = 10000000.0;
 2c4:	07 30       	cpi	r16, 0x07	; 7
 2c6:	11 05       	cpc	r17, r1
 2c8:	09 f4       	brne	.+2      	; 0x2cc <Send_A_Float_withloc+0x52>
 2ca:	48 c0       	rjmp	.+144    	; 0x35c <Send_A_Float_withloc+0xe2>

	else if (decimal==8)	after = 100000000.0;
 2cc:	08 30       	cpi	r16, 0x08	; 8
 2ce:	11 05       	cpc	r17, r1
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <Send_A_Float_withloc+0x5a>
 2d2:	4f c0       	rjmp	.+158    	; 0x372 <Send_A_Float_withloc+0xf8>
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f0 e2       	ldi	r31, 0x20	; 32
 2d8:	4f 2e       	mov	r4, r31
 2da:	fc eb       	ldi	r31, 0xBC	; 188
 2dc:	5f 2e       	mov	r5, r31
 2de:	fe eb       	ldi	r31, 0xBE	; 190
 2e0:	6f 2e       	mov	r6, r31
 2e2:	fc e4       	ldi	r31, 0x4C	; 76
 2e4:	7f 2e       	mov	r7, r31
 2e6:	f0 2d       	mov	r31, r0
 2e8:	4c c0       	rjmp	.+152    	; 0x382 <Send_A_Float_withloc+0x108>
{
	Goto_Location(y,x);
	
	float after=10.0;

	if (decimal == 1 )		after = after *1;
 2ea:	0f 2e       	mov	r0, r31
 2ec:	41 2c       	mov	r4, r1
 2ee:	51 2c       	mov	r5, r1
 2f0:	f0 e2       	ldi	r31, 0x20	; 32
 2f2:	6f 2e       	mov	r6, r31
 2f4:	f1 e4       	ldi	r31, 0x41	; 65
 2f6:	7f 2e       	mov	r7, r31
 2f8:	f0 2d       	mov	r31, r0
 2fa:	43 c0       	rjmp	.+134    	; 0x382 <Send_A_Float_withloc+0x108>

	else if (decimal==2)	after = 100.0;
 2fc:	0f 2e       	mov	r0, r31
 2fe:	41 2c       	mov	r4, r1
 300:	51 2c       	mov	r5, r1
 302:	f8 ec       	ldi	r31, 0xC8	; 200
 304:	6f 2e       	mov	r6, r31
 306:	f2 e4       	ldi	r31, 0x42	; 66
 308:	7f 2e       	mov	r7, r31
 30a:	f0 2d       	mov	r31, r0
 30c:	3a c0       	rjmp	.+116    	; 0x382 <Send_A_Float_withloc+0x108>

	else if (decimal==3)	after = 1000.0;
 30e:	0f 2e       	mov	r0, r31
 310:	41 2c       	mov	r4, r1
 312:	51 2c       	mov	r5, r1
 314:	fa e7       	ldi	r31, 0x7A	; 122
 316:	6f 2e       	mov	r6, r31
 318:	f4 e4       	ldi	r31, 0x44	; 68
 31a:	7f 2e       	mov	r7, r31
 31c:	f0 2d       	mov	r31, r0
 31e:	31 c0       	rjmp	.+98     	; 0x382 <Send_A_Float_withloc+0x108>

	else if (decimal==4)	after = 10000.0;
 320:	0f 2e       	mov	r0, r31
 322:	41 2c       	mov	r4, r1
 324:	f0 e4       	ldi	r31, 0x40	; 64
 326:	5f 2e       	mov	r5, r31
 328:	fc e1       	ldi	r31, 0x1C	; 28
 32a:	6f 2e       	mov	r6, r31
 32c:	f6 e4       	ldi	r31, 0x46	; 70
 32e:	7f 2e       	mov	r7, r31
 330:	f0 2d       	mov	r31, r0
 332:	27 c0       	rjmp	.+78     	; 0x382 <Send_A_Float_withloc+0x108>

	else if (decimal==5)	after = 100000.0;
 334:	0f 2e       	mov	r0, r31
 336:	41 2c       	mov	r4, r1
 338:	f0 e5       	ldi	r31, 0x50	; 80
 33a:	5f 2e       	mov	r5, r31
 33c:	f3 ec       	ldi	r31, 0xC3	; 195
 33e:	6f 2e       	mov	r6, r31
 340:	f7 e4       	ldi	r31, 0x47	; 71
 342:	7f 2e       	mov	r7, r31
 344:	f0 2d       	mov	r31, r0
 346:	1d c0       	rjmp	.+58     	; 0x382 <Send_A_Float_withloc+0x108>

	else if (decimal==6)	after = 1000000.0;
 348:	0f 2e       	mov	r0, r31
 34a:	41 2c       	mov	r4, r1
 34c:	f4 e2       	ldi	r31, 0x24	; 36
 34e:	5f 2e       	mov	r5, r31
 350:	f4 e7       	ldi	r31, 0x74	; 116
 352:	6f 2e       	mov	r6, r31
 354:	f9 e4       	ldi	r31, 0x49	; 73
 356:	7f 2e       	mov	r7, r31
 358:	f0 2d       	mov	r31, r0
 35a:	13 c0       	rjmp	.+38     	; 0x382 <Send_A_Float_withloc+0x108>

	else if (decimal==7)	after = 10000000.0;
 35c:	0f 2e       	mov	r0, r31
 35e:	f0 e8       	ldi	r31, 0x80	; 128
 360:	4f 2e       	mov	r4, r31
 362:	f6 e9       	ldi	r31, 0x96	; 150
 364:	5f 2e       	mov	r5, r31
 366:	f8 e1       	ldi	r31, 0x18	; 24
 368:	6f 2e       	mov	r6, r31
 36a:	fb e4       	ldi	r31, 0x4B	; 75
 36c:	7f 2e       	mov	r7, r31
 36e:	f0 2d       	mov	r31, r0
 370:	08 c0       	rjmp	.+16     	; 0x382 <Send_A_Float_withloc+0x108>

void Send_A_Float_withloc(uint8_t y, uint8_t x ,  float number , unsigned int decimal)
{
	Goto_Location(y,x);
	
	float after=10.0;
 372:	0f 2e       	mov	r0, r31
 374:	41 2c       	mov	r4, r1
 376:	51 2c       	mov	r5, r1
 378:	f0 e2       	ldi	r31, 0x20	; 32
 37a:	6f 2e       	mov	r6, r31
 37c:	f1 e4       	ldi	r31, 0x41	; 65
 37e:	7f 2e       	mov	r7, r31
 380:	f0 2d       	mov	r31, r0

	else if (decimal==7)	after = 10000000.0;

	else if (decimal==8)	after = 100000000.0;

	int intValue = (int)number;
 382:	c5 01       	movw	r24, r10
 384:	b4 01       	movw	r22, r8
 386:	0e 94 88 02 	call	0x510	; 0x510 <__fixsfsi>
 38a:	6b 01       	movw	r12, r22
 38c:	7c 01       	movw	r14, r24
	float diffValue = number - (float)intValue;
	int decimalValue = (int)(diffValue * after);
	
	
	Send_An_Integer(intValue,5);
 38e:	65 e0       	ldi	r22, 0x05	; 5
 390:	c6 01       	movw	r24, r12
 392:	0e 94 13 01 	call	0x226	; 0x226 <Send_An_Integer>
	Send_A_Character('.');
 396:	8e e2       	ldi	r24, 0x2E	; 46
 398:	0e 94 7e 00 	call	0xfc	; 0xfc <Send_A_Character>
	else if (decimal==7)	after = 10000000.0;

	else if (decimal==8)	after = 100000000.0;

	int intValue = (int)number;
	float diffValue = number - (float)intValue;
 39c:	b6 01       	movw	r22, r12
 39e:	dd 0c       	add	r13, r13
 3a0:	88 0b       	sbc	r24, r24
 3a2:	99 0b       	sbc	r25, r25
 3a4:	0e 94 c0 02 	call	0x580	; 0x580 <__floatsisf>
 3a8:	9b 01       	movw	r18, r22
 3aa:	ac 01       	movw	r20, r24
 3ac:	c5 01       	movw	r24, r10
 3ae:	b4 01       	movw	r22, r8
 3b0:	0e 94 1b 02 	call	0x436	; 0x436 <__subsf3>
	int decimalValue = (int)(diffValue * after);
 3b4:	a3 01       	movw	r20, r6
 3b6:	92 01       	movw	r18, r4
 3b8:	0e 94 4c 03 	call	0x698	; 0x698 <__mulsf3>
 3bc:	0e 94 88 02 	call	0x510	; 0x510 <__fixsfsi>
 3c0:	dc 01       	movw	r26, r24
 3c2:	cb 01       	movw	r24, r22
	
	
	Send_An_Integer(intValue,5);
	Send_A_Character('.');
	Send_An_Integer(decimalValue,5);
 3c4:	65 e0       	ldi	r22, 0x05	; 5
 3c6:	0e 94 13 01 	call	0x226	; 0x226 <Send_An_Integer>

}
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	bf 90       	pop	r11
 3d8:	af 90       	pop	r10
 3da:	9f 90       	pop	r9
 3dc:	8f 90       	pop	r8
 3de:	7f 90       	pop	r7
 3e0:	6f 90       	pop	r6
 3e2:	5f 90       	pop	r5
 3e4:	4f 90       	pop	r4
 3e6:	08 95       	ret

000003e8 <main>:
#include <util/delay.h>

int main(void)
{
	
	LCD_Initializaion();
 3e8:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Initializaion>
	Send_A_String_WithLoc(1,1,"adc0");
 3ec:	44 e6       	ldi	r20, 0x64	; 100
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 be 00 	call	0x17c	; 0x17c <Send_A_String_WithLoc>
	Send_A_Float_withloc(2,3,111.158,2);
 3fc:	02 e0       	ldi	r16, 0x02	; 2
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	25 ee       	ldi	r18, 0xE5	; 229
 402:	30 e5       	ldi	r19, 0x50	; 80
 404:	4e ed       	ldi	r20, 0xDE	; 222
 406:	52 e4       	ldi	r21, 0x42	; 66
 408:	63 e0       	ldi	r22, 0x03	; 3
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 3d 01 	call	0x27a	; 0x27a <Send_A_Float_withloc>

	while (1)
	{	
		Send_An_Integer_WithLoc(1,7,15000,4);
 414:	24 e0       	ldi	r18, 0x04	; 4
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	48 e9       	ldi	r20, 0x98	; 152
 41a:	5a e3       	ldi	r21, 0x3A	; 58
 41c:	67 e0       	ldi	r22, 0x07	; 7
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 c9 00 	call	0x192	; 0x192 <Send_An_Integer_WithLoc>
 428:	87 ea       	ldi	r24, 0xA7	; 167
 42a:	91 e6       	ldi	r25, 0x61	; 97
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	ef cf       	rjmp	.-34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

00000436 <__subsf3>:
 436:	50 58       	subi	r21, 0x80	; 128

00000438 <__addsf3>:
 438:	bb 27       	eor	r27, r27
 43a:	aa 27       	eor	r26, r26
 43c:	0e 94 33 02 	call	0x466	; 0x466 <__addsf3x>
 440:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_round>
 444:	0e 94 04 03 	call	0x608	; 0x608 <__fp_pscA>
 448:	38 f0       	brcs	.+14     	; 0x458 <__addsf3+0x20>
 44a:	0e 94 0b 03 	call	0x616	; 0x616 <__fp_pscB>
 44e:	20 f0       	brcs	.+8      	; 0x458 <__addsf3+0x20>
 450:	39 f4       	brne	.+14     	; 0x460 <__addsf3+0x28>
 452:	9f 3f       	cpi	r25, 0xFF	; 255
 454:	19 f4       	brne	.+6      	; 0x45c <__addsf3+0x24>
 456:	26 f4       	brtc	.+8      	; 0x460 <__addsf3+0x28>
 458:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_nan>
 45c:	0e f4       	brtc	.+2      	; 0x460 <__addsf3+0x28>
 45e:	e0 95       	com	r30
 460:	e7 fb       	bst	r30, 7
 462:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>

00000466 <__addsf3x>:
 466:	e9 2f       	mov	r30, r25
 468:	0e 94 23 03 	call	0x646	; 0x646 <__fp_split3>
 46c:	58 f3       	brcs	.-42     	; 0x444 <__addsf3+0xc>
 46e:	ba 17       	cp	r27, r26
 470:	62 07       	cpc	r22, r18
 472:	73 07       	cpc	r23, r19
 474:	84 07       	cpc	r24, r20
 476:	95 07       	cpc	r25, r21
 478:	20 f0       	brcs	.+8      	; 0x482 <__addsf3x+0x1c>
 47a:	79 f4       	brne	.+30     	; 0x49a <__addsf3x+0x34>
 47c:	a6 f5       	brtc	.+104    	; 0x4e6 <__addsf3x+0x80>
 47e:	0c 94 45 03 	jmp	0x68a	; 0x68a <__fp_zero>
 482:	0e f4       	brtc	.+2      	; 0x486 <__addsf3x+0x20>
 484:	e0 95       	com	r30
 486:	0b 2e       	mov	r0, r27
 488:	ba 2f       	mov	r27, r26
 48a:	a0 2d       	mov	r26, r0
 48c:	0b 01       	movw	r0, r22
 48e:	b9 01       	movw	r22, r18
 490:	90 01       	movw	r18, r0
 492:	0c 01       	movw	r0, r24
 494:	ca 01       	movw	r24, r20
 496:	a0 01       	movw	r20, r0
 498:	11 24       	eor	r1, r1
 49a:	ff 27       	eor	r31, r31
 49c:	59 1b       	sub	r21, r25
 49e:	99 f0       	breq	.+38     	; 0x4c6 <__addsf3x+0x60>
 4a0:	59 3f       	cpi	r21, 0xF9	; 249
 4a2:	50 f4       	brcc	.+20     	; 0x4b8 <__addsf3x+0x52>
 4a4:	50 3e       	cpi	r21, 0xE0	; 224
 4a6:	68 f1       	brcs	.+90     	; 0x502 <__addsf3x+0x9c>
 4a8:	1a 16       	cp	r1, r26
 4aa:	f0 40       	sbci	r31, 0x00	; 0
 4ac:	a2 2f       	mov	r26, r18
 4ae:	23 2f       	mov	r18, r19
 4b0:	34 2f       	mov	r19, r20
 4b2:	44 27       	eor	r20, r20
 4b4:	58 5f       	subi	r21, 0xF8	; 248
 4b6:	f3 cf       	rjmp	.-26     	; 0x49e <__addsf3x+0x38>
 4b8:	46 95       	lsr	r20
 4ba:	37 95       	ror	r19
 4bc:	27 95       	ror	r18
 4be:	a7 95       	ror	r26
 4c0:	f0 40       	sbci	r31, 0x00	; 0
 4c2:	53 95       	inc	r21
 4c4:	c9 f7       	brne	.-14     	; 0x4b8 <__addsf3x+0x52>
 4c6:	7e f4       	brtc	.+30     	; 0x4e6 <__addsf3x+0x80>
 4c8:	1f 16       	cp	r1, r31
 4ca:	ba 0b       	sbc	r27, r26
 4cc:	62 0b       	sbc	r22, r18
 4ce:	73 0b       	sbc	r23, r19
 4d0:	84 0b       	sbc	r24, r20
 4d2:	ba f0       	brmi	.+46     	; 0x502 <__addsf3x+0x9c>
 4d4:	91 50       	subi	r25, 0x01	; 1
 4d6:	a1 f0       	breq	.+40     	; 0x500 <__addsf3x+0x9a>
 4d8:	ff 0f       	add	r31, r31
 4da:	bb 1f       	adc	r27, r27
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	c2 f7       	brpl	.-16     	; 0x4d4 <__addsf3x+0x6e>
 4e4:	0e c0       	rjmp	.+28     	; 0x502 <__addsf3x+0x9c>
 4e6:	ba 0f       	add	r27, r26
 4e8:	62 1f       	adc	r22, r18
 4ea:	73 1f       	adc	r23, r19
 4ec:	84 1f       	adc	r24, r20
 4ee:	48 f4       	brcc	.+18     	; 0x502 <__addsf3x+0x9c>
 4f0:	87 95       	ror	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f7 95       	ror	r31
 4fa:	9e 3f       	cpi	r25, 0xFE	; 254
 4fc:	08 f0       	brcs	.+2      	; 0x500 <__addsf3x+0x9a>
 4fe:	b0 cf       	rjmp	.-160    	; 0x460 <__addsf3+0x28>
 500:	93 95       	inc	r25
 502:	88 0f       	add	r24, r24
 504:	08 f0       	brcs	.+2      	; 0x508 <__addsf3x+0xa2>
 506:	99 27       	eor	r25, r25
 508:	ee 0f       	add	r30, r30
 50a:	97 95       	ror	r25
 50c:	87 95       	ror	r24
 50e:	08 95       	ret

00000510 <__fixsfsi>:
 510:	0e 94 8f 02 	call	0x51e	; 0x51e <__fixunssfsi>
 514:	68 94       	set
 516:	b1 11       	cpse	r27, r1
 518:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_szero>
 51c:	08 95       	ret

0000051e <__fixunssfsi>:
 51e:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_splitA>
 522:	88 f0       	brcs	.+34     	; 0x546 <__fixunssfsi+0x28>
 524:	9f 57       	subi	r25, 0x7F	; 127
 526:	98 f0       	brcs	.+38     	; 0x54e <__fixunssfsi+0x30>
 528:	b9 2f       	mov	r27, r25
 52a:	99 27       	eor	r25, r25
 52c:	b7 51       	subi	r27, 0x17	; 23
 52e:	b0 f0       	brcs	.+44     	; 0x55c <__fixunssfsi+0x3e>
 530:	e1 f0       	breq	.+56     	; 0x56a <__fixunssfsi+0x4c>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	1a f0       	brmi	.+6      	; 0x542 <__fixunssfsi+0x24>
 53c:	ba 95       	dec	r27
 53e:	c9 f7       	brne	.-14     	; 0x532 <__fixunssfsi+0x14>
 540:	14 c0       	rjmp	.+40     	; 0x56a <__fixunssfsi+0x4c>
 542:	b1 30       	cpi	r27, 0x01	; 1
 544:	91 f0       	breq	.+36     	; 0x56a <__fixunssfsi+0x4c>
 546:	0e 94 45 03 	call	0x68a	; 0x68a <__fp_zero>
 54a:	b1 e0       	ldi	r27, 0x01	; 1
 54c:	08 95       	ret
 54e:	0c 94 45 03 	jmp	0x68a	; 0x68a <__fp_zero>
 552:	67 2f       	mov	r22, r23
 554:	78 2f       	mov	r23, r24
 556:	88 27       	eor	r24, r24
 558:	b8 5f       	subi	r27, 0xF8	; 248
 55a:	39 f0       	breq	.+14     	; 0x56a <__fixunssfsi+0x4c>
 55c:	b9 3f       	cpi	r27, 0xF9	; 249
 55e:	cc f3       	brlt	.-14     	; 0x552 <__fixunssfsi+0x34>
 560:	86 95       	lsr	r24
 562:	77 95       	ror	r23
 564:	67 95       	ror	r22
 566:	b3 95       	inc	r27
 568:	d9 f7       	brne	.-10     	; 0x560 <__fixunssfsi+0x42>
 56a:	3e f4       	brtc	.+14     	; 0x57a <__fixunssfsi+0x5c>
 56c:	90 95       	com	r25
 56e:	80 95       	com	r24
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	8f 4f       	sbci	r24, 0xFF	; 255
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	08 95       	ret

0000057c <__floatunsisf>:
 57c:	e8 94       	clt
 57e:	09 c0       	rjmp	.+18     	; 0x592 <__floatsisf+0x12>

00000580 <__floatsisf>:
 580:	97 fb       	bst	r25, 7
 582:	3e f4       	brtc	.+14     	; 0x592 <__floatsisf+0x12>
 584:	90 95       	com	r25
 586:	80 95       	com	r24
 588:	70 95       	com	r23
 58a:	61 95       	neg	r22
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	8f 4f       	sbci	r24, 0xFF	; 255
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	99 23       	and	r25, r25
 594:	a9 f0       	breq	.+42     	; 0x5c0 <__floatsisf+0x40>
 596:	f9 2f       	mov	r31, r25
 598:	96 e9       	ldi	r25, 0x96	; 150
 59a:	bb 27       	eor	r27, r27
 59c:	93 95       	inc	r25
 59e:	f6 95       	lsr	r31
 5a0:	87 95       	ror	r24
 5a2:	77 95       	ror	r23
 5a4:	67 95       	ror	r22
 5a6:	b7 95       	ror	r27
 5a8:	f1 11       	cpse	r31, r1
 5aa:	f8 cf       	rjmp	.-16     	; 0x59c <__floatsisf+0x1c>
 5ac:	fa f4       	brpl	.+62     	; 0x5ec <__floatsisf+0x6c>
 5ae:	bb 0f       	add	r27, r27
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__floatsisf+0x36>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	1b c0       	rjmp	.+54     	; 0x5ec <__floatsisf+0x6c>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	16 c0       	rjmp	.+44     	; 0x5ec <__floatsisf+0x6c>
 5c0:	88 23       	and	r24, r24
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <__floatsisf+0x48>
 5c4:	96 e9       	ldi	r25, 0x96	; 150
 5c6:	11 c0       	rjmp	.+34     	; 0x5ea <__floatsisf+0x6a>
 5c8:	77 23       	and	r23, r23
 5ca:	21 f0       	breq	.+8      	; 0x5d4 <__floatsisf+0x54>
 5cc:	9e e8       	ldi	r25, 0x8E	; 142
 5ce:	87 2f       	mov	r24, r23
 5d0:	76 2f       	mov	r23, r22
 5d2:	05 c0       	rjmp	.+10     	; 0x5de <__floatsisf+0x5e>
 5d4:	66 23       	and	r22, r22
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__floatsisf+0x74>
 5d8:	96 e8       	ldi	r25, 0x86	; 134
 5da:	86 2f       	mov	r24, r22
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	2a f0       	brmi	.+10     	; 0x5ec <__floatsisf+0x6c>
 5e2:	9a 95       	dec	r25
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	da f7       	brpl	.-10     	; 0x5e2 <__floatsisf+0x62>
 5ec:	88 0f       	add	r24, r24
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret

000005f6 <__fp_inf>:
 5f6:	97 f9       	bld	r25, 7
 5f8:	9f 67       	ori	r25, 0x7F	; 127
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	08 95       	ret

00000602 <__fp_nan>:
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	08 95       	ret

00000608 <__fp_pscA>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	16 16       	cp	r1, r22
 60e:	17 06       	cpc	r1, r23
 610:	18 06       	cpc	r1, r24
 612:	09 06       	cpc	r0, r25
 614:	08 95       	ret

00000616 <__fp_pscB>:
 616:	00 24       	eor	r0, r0
 618:	0a 94       	dec	r0
 61a:	12 16       	cp	r1, r18
 61c:	13 06       	cpc	r1, r19
 61e:	14 06       	cpc	r1, r20
 620:	05 06       	cpc	r0, r21
 622:	08 95       	ret

00000624 <__fp_round>:
 624:	09 2e       	mov	r0, r25
 626:	03 94       	inc	r0
 628:	00 0c       	add	r0, r0
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0xc>
 62c:	88 23       	and	r24, r24
 62e:	52 f0       	brmi	.+20     	; 0x644 <__fp_round+0x20>
 630:	bb 0f       	add	r27, r27
 632:	40 f4       	brcc	.+16     	; 0x644 <__fp_round+0x20>
 634:	bf 2b       	or	r27, r31
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_round+0x18>
 638:	60 ff       	sbrs	r22, 0
 63a:	04 c0       	rjmp	.+8      	; 0x644 <__fp_round+0x20>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__fp_split3>:
 646:	57 fd       	sbrc	r21, 7
 648:	90 58       	subi	r25, 0x80	; 128
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	59 f0       	breq	.+22     	; 0x666 <__fp_splitA+0x10>
 650:	5f 3f       	cpi	r21, 0xFF	; 255
 652:	71 f0       	breq	.+28     	; 0x670 <__fp_splitA+0x1a>
 654:	47 95       	ror	r20

00000656 <__fp_splitA>:
 656:	88 0f       	add	r24, r24
 658:	97 fb       	bst	r25, 7
 65a:	99 1f       	adc	r25, r25
 65c:	61 f0       	breq	.+24     	; 0x676 <__fp_splitA+0x20>
 65e:	9f 3f       	cpi	r25, 0xFF	; 255
 660:	79 f0       	breq	.+30     	; 0x680 <__fp_splitA+0x2a>
 662:	87 95       	ror	r24
 664:	08 95       	ret
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	55 1f       	adc	r21, r21
 66e:	f2 cf       	rjmp	.-28     	; 0x654 <__fp_split3+0xe>
 670:	46 95       	lsr	r20
 672:	f1 df       	rcall	.-30     	; 0x656 <__fp_splitA>
 674:	08 c0       	rjmp	.+16     	; 0x686 <__fp_splitA+0x30>
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	18 06       	cpc	r1, r24
 67c:	99 1f       	adc	r25, r25
 67e:	f1 cf       	rjmp	.-30     	; 0x662 <__fp_splitA+0xc>
 680:	86 95       	lsr	r24
 682:	71 05       	cpc	r23, r1
 684:	61 05       	cpc	r22, r1
 686:	08 94       	sec
 688:	08 95       	ret

0000068a <__fp_zero>:
 68a:	e8 94       	clt

0000068c <__fp_szero>:
 68c:	bb 27       	eor	r27, r27
 68e:	66 27       	eor	r22, r22
 690:	77 27       	eor	r23, r23
 692:	cb 01       	movw	r24, r22
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <__mulsf3>:
 698:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3x>
 69c:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_round>
 6a0:	0e 94 04 03 	call	0x608	; 0x608 <__fp_pscA>
 6a4:	38 f0       	brcs	.+14     	; 0x6b4 <__mulsf3+0x1c>
 6a6:	0e 94 0b 03 	call	0x616	; 0x616 <__fp_pscB>
 6aa:	20 f0       	brcs	.+8      	; 0x6b4 <__mulsf3+0x1c>
 6ac:	95 23       	and	r25, r21
 6ae:	11 f0       	breq	.+4      	; 0x6b4 <__mulsf3+0x1c>
 6b0:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 6b4:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_nan>
 6b8:	11 24       	eor	r1, r1
 6ba:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_szero>

000006be <__mulsf3x>:
 6be:	0e 94 23 03 	call	0x646	; 0x646 <__fp_split3>
 6c2:	70 f3       	brcs	.-36     	; 0x6a0 <__mulsf3+0x8>

000006c4 <__mulsf3_pse>:
 6c4:	95 9f       	mul	r25, r21
 6c6:	c1 f3       	breq	.-16     	; 0x6b8 <__mulsf3+0x20>
 6c8:	95 0f       	add	r25, r21
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	55 1f       	adc	r21, r21
 6ce:	62 9f       	mul	r22, r18
 6d0:	f0 01       	movw	r30, r0
 6d2:	72 9f       	mul	r23, r18
 6d4:	bb 27       	eor	r27, r27
 6d6:	f0 0d       	add	r31, r0
 6d8:	b1 1d       	adc	r27, r1
 6da:	63 9f       	mul	r22, r19
 6dc:	aa 27       	eor	r26, r26
 6de:	f0 0d       	add	r31, r0
 6e0:	b1 1d       	adc	r27, r1
 6e2:	aa 1f       	adc	r26, r26
 6e4:	64 9f       	mul	r22, r20
 6e6:	66 27       	eor	r22, r22
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	66 1f       	adc	r22, r22
 6ee:	82 9f       	mul	r24, r18
 6f0:	22 27       	eor	r18, r18
 6f2:	b0 0d       	add	r27, r0
 6f4:	a1 1d       	adc	r26, r1
 6f6:	62 1f       	adc	r22, r18
 6f8:	73 9f       	mul	r23, r19
 6fa:	b0 0d       	add	r27, r0
 6fc:	a1 1d       	adc	r26, r1
 6fe:	62 1f       	adc	r22, r18
 700:	83 9f       	mul	r24, r19
 702:	a0 0d       	add	r26, r0
 704:	61 1d       	adc	r22, r1
 706:	22 1f       	adc	r18, r18
 708:	74 9f       	mul	r23, r20
 70a:	33 27       	eor	r19, r19
 70c:	a0 0d       	add	r26, r0
 70e:	61 1d       	adc	r22, r1
 710:	23 1f       	adc	r18, r19
 712:	84 9f       	mul	r24, r20
 714:	60 0d       	add	r22, r0
 716:	21 1d       	adc	r18, r1
 718:	82 2f       	mov	r24, r18
 71a:	76 2f       	mov	r23, r22
 71c:	6a 2f       	mov	r22, r26
 71e:	11 24       	eor	r1, r1
 720:	9f 57       	subi	r25, 0x7F	; 127
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	9a f0       	brmi	.+38     	; 0x74c <__mulsf3_pse+0x88>
 726:	f1 f0       	breq	.+60     	; 0x764 <__mulsf3_pse+0xa0>
 728:	88 23       	and	r24, r24
 72a:	4a f0       	brmi	.+18     	; 0x73e <__mulsf3_pse+0x7a>
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	bb 1f       	adc	r27, r27
 732:	66 1f       	adc	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	91 50       	subi	r25, 0x01	; 1
 73a:	50 40       	sbci	r21, 0x00	; 0
 73c:	a9 f7       	brne	.-22     	; 0x728 <__mulsf3_pse+0x64>
 73e:	9e 3f       	cpi	r25, 0xFE	; 254
 740:	51 05       	cpc	r21, r1
 742:	80 f0       	brcs	.+32     	; 0x764 <__mulsf3_pse+0xa0>
 744:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 748:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_szero>
 74c:	5f 3f       	cpi	r21, 0xFF	; 255
 74e:	e4 f3       	brlt	.-8      	; 0x748 <__mulsf3_pse+0x84>
 750:	98 3e       	cpi	r25, 0xE8	; 232
 752:	d4 f3       	brlt	.-12     	; 0x748 <__mulsf3_pse+0x84>
 754:	86 95       	lsr	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b7 95       	ror	r27
 75c:	f7 95       	ror	r31
 75e:	e7 95       	ror	r30
 760:	9f 5f       	subi	r25, 0xFF	; 255
 762:	c1 f7       	brne	.-16     	; 0x754 <__mulsf3_pse+0x90>
 764:	fe 2b       	or	r31, r30
 766:	88 0f       	add	r24, r24
 768:	91 1d       	adc	r25, r1
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret

00000772 <__itoa_ncheck>:
 772:	bb 27       	eor	r27, r27
 774:	4a 30       	cpi	r20, 0x0A	; 10
 776:	31 f4       	brne	.+12     	; 0x784 <__itoa_ncheck+0x12>
 778:	99 23       	and	r25, r25
 77a:	22 f4       	brpl	.+8      	; 0x784 <__itoa_ncheck+0x12>
 77c:	bd e2       	ldi	r27, 0x2D	; 45
 77e:	90 95       	com	r25
 780:	81 95       	neg	r24
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__utoa_common>

00000788 <__utoa_ncheck>:
 788:	bb 27       	eor	r27, r27

0000078a <__utoa_common>:
 78a:	fb 01       	movw	r30, r22
 78c:	55 27       	eor	r21, r21
 78e:	aa 27       	eor	r26, r26
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	aa 1f       	adc	r26, r26
 796:	a4 17       	cp	r26, r20
 798:	10 f0       	brcs	.+4      	; 0x79e <__utoa_common+0x14>
 79a:	a4 1b       	sub	r26, r20
 79c:	83 95       	inc	r24
 79e:	50 51       	subi	r21, 0x10	; 16
 7a0:	b9 f7       	brne	.-18     	; 0x790 <__utoa_common+0x6>
 7a2:	a0 5d       	subi	r26, 0xD0	; 208
 7a4:	aa 33       	cpi	r26, 0x3A	; 58
 7a6:	08 f0       	brcs	.+2      	; 0x7aa <__utoa_common+0x20>
 7a8:	a9 5d       	subi	r26, 0xD9	; 217
 7aa:	a1 93       	st	Z+, r26
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	79 f7       	brne	.-34     	; 0x78e <__utoa_common+0x4>
 7b0:	b1 11       	cpse	r27, r1
 7b2:	b1 93       	st	Z+, r27
 7b4:	11 92       	st	Z+, r1
 7b6:	cb 01       	movw	r24, r22
 7b8:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <strrev>

000007bc <strrev>:
 7bc:	dc 01       	movw	r26, r24
 7be:	fc 01       	movw	r30, r24
 7c0:	67 2f       	mov	r22, r23
 7c2:	71 91       	ld	r23, Z+
 7c4:	77 23       	and	r23, r23
 7c6:	e1 f7       	brne	.-8      	; 0x7c0 <strrev+0x4>
 7c8:	32 97       	sbiw	r30, 0x02	; 2
 7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <strrev+0x18>
 7cc:	7c 91       	ld	r23, X
 7ce:	6d 93       	st	X+, r22
 7d0:	70 83       	st	Z, r23
 7d2:	62 91       	ld	r22, -Z
 7d4:	ae 17       	cp	r26, r30
 7d6:	bf 07       	cpc	r27, r31
 7d8:	c8 f3       	brcs	.-14     	; 0x7cc <strrev+0x10>
 7da:	08 95       	ret

000007dc <_exit>:
 7dc:	f8 94       	cli

000007de <__stop_program>:
 7de:	ff cf       	rjmp	.-2      	; 0x7de <__stop_program>
